// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mess.proto

package Tarea_distribuidos_3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VanguardiaClient is the client API for Vanguardia service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VanguardiaClient interface {
	GetSoldados(ctx context.Context, in *ParametroSectorBase, opts ...grpc.CallOption) (*RetornoCantSoldOscuridadReloj, error)
}

type vanguardiaClient struct {
	cc grpc.ClientConnInterface
}

func NewVanguardiaClient(cc grpc.ClientConnInterface) VanguardiaClient {
	return &vanguardiaClient{cc}
}

func (c *vanguardiaClient) GetSoldados(ctx context.Context, in *ParametroSectorBase, opts ...grpc.CallOption) (*RetornoCantSoldOscuridadReloj, error) {
	out := new(RetornoCantSoldOscuridadReloj)
	err := c.cc.Invoke(ctx, "/grpc.Vanguardia/GetSoldados", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VanguardiaServer is the server API for Vanguardia service.
// All implementations must embed UnimplementedVanguardiaServer
// for forward compatibility
type VanguardiaServer interface {
	GetSoldados(context.Context, *ParametroSectorBase) (*RetornoCantSoldOscuridadReloj, error)
	mustEmbedUnimplementedVanguardiaServer()
}

// UnimplementedVanguardiaServer must be embedded to have forward compatible implementations.
type UnimplementedVanguardiaServer struct {
}

func (UnimplementedVanguardiaServer) GetSoldados(context.Context, *ParametroSectorBase) (*RetornoCantSoldOscuridadReloj, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoldados not implemented")
}
func (UnimplementedVanguardiaServer) mustEmbedUnimplementedVanguardiaServer() {}

// UnsafeVanguardiaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VanguardiaServer will
// result in compilation errors.
type UnsafeVanguardiaServer interface {
	mustEmbedUnimplementedVanguardiaServer()
}

func RegisterVanguardiaServer(s grpc.ServiceRegistrar, srv VanguardiaServer) {
	s.RegisterService(&Vanguardia_ServiceDesc, srv)
}

func _Vanguardia_GetSoldados_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParametroSectorBase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VanguardiaServer).GetSoldados(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Vanguardia/GetSoldados",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VanguardiaServer).GetSoldados(ctx, req.(*ParametroSectorBase))
	}
	return interceptor(ctx, in, info, handler)
}

// Vanguardia_ServiceDesc is the grpc.ServiceDesc for Vanguardia service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vanguardia_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Vanguardia",
	HandlerType: (*VanguardiaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSoldados",
			Handler:    _Vanguardia_GetSoldados_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mess.proto",
}

// InformantesClient is the client API for Informantes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InformantesClient interface {
	ObtenerServidorConsultarAleatorio(ctx context.Context, in *ParamamtroVacio, opts ...grpc.CallOption) (*ServidorAConsultar, error)
}

type informantesClient struct {
	cc grpc.ClientConnInterface
}

func NewInformantesClient(cc grpc.ClientConnInterface) InformantesClient {
	return &informantesClient{cc}
}

func (c *informantesClient) ObtenerServidorConsultarAleatorio(ctx context.Context, in *ParamamtroVacio, opts ...grpc.CallOption) (*ServidorAConsultar, error) {
	out := new(ServidorAConsultar)
	err := c.cc.Invoke(ctx, "/grpc.Informantes/Obtener_servidor_consultar_aleatorio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InformantesServer is the server API for Informantes service.
// All implementations must embed UnimplementedInformantesServer
// for forward compatibility
type InformantesServer interface {
	ObtenerServidorConsultarAleatorio(context.Context, *ParamamtroVacio) (*ServidorAConsultar, error)
	mustEmbedUnimplementedInformantesServer()
}

// UnimplementedInformantesServer must be embedded to have forward compatible implementations.
type UnimplementedInformantesServer struct {
}

func (UnimplementedInformantesServer) ObtenerServidorConsultarAleatorio(context.Context, *ParamamtroVacio) (*ServidorAConsultar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtenerServidorConsultarAleatorio not implemented")
}
func (UnimplementedInformantesServer) mustEmbedUnimplementedInformantesServer() {}

// UnsafeInformantesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InformantesServer will
// result in compilation errors.
type UnsafeInformantesServer interface {
	mustEmbedUnimplementedInformantesServer()
}

func RegisterInformantesServer(s grpc.ServiceRegistrar, srv InformantesServer) {
	s.RegisterService(&Informantes_ServiceDesc, srv)
}

func _Informantes_ObtenerServidorConsultarAleatorio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamamtroVacio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformantesServer).ObtenerServidorConsultarAleatorio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Informantes/Obtener_servidor_consultar_aleatorio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformantesServer).ObtenerServidorConsultarAleatorio(ctx, req.(*ParamamtroVacio))
	}
	return interceptor(ctx, in, info, handler)
}

// Informantes_ServiceDesc is the grpc.ServiceDesc for Informantes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Informantes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Informantes",
	HandlerType: (*InformantesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Obtener_servidor_consultar_aleatorio",
			Handler:    _Informantes_ObtenerServidorConsultarAleatorio_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mess.proto",
}
