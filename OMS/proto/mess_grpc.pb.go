// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: mess.proto

package Tarea_distribuidos_2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NameNodeClient is the client API for NameNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NameNodeClient interface {
	Recepcion_Info(ctx context.Context, in *Datos, opts ...grpc.CallOption) (*Recepcion, error)
	ConsultarNombres(ctx context.Context, in *Estado_Persona, opts ...grpc.CallOption) (*Lista_Datos_DataNode, error)
}

type nameNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNameNodeClient(cc grpc.ClientConnInterface) NameNodeClient {
	return &nameNodeClient{cc}
}

func (c *nameNodeClient) Recepcion_Info(ctx context.Context, in *Datos, opts ...grpc.CallOption) (*Recepcion, error) {
	out := new(Recepcion)
	err := c.cc.Invoke(ctx, "/grpc.NameNode/Recepcion_Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameNodeClient) ConsultarNombres(ctx context.Context, in *Estado_Persona, opts ...grpc.CallOption) (*Lista_Datos_DataNode, error) {
	out := new(Lista_Datos_DataNode)
	err := c.cc.Invoke(ctx, "/grpc.NameNode/ConsultarNombres", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NameNodeServer is the server API for NameNode service.
// All implementations must embed UnimplementedNameNodeServer
// for forward compatibility
type NameNodeServer interface {
	Recepcion_Info(context.Context, *Datos) (*Recepcion, error)
	ConsultarNombres(context.Context, *Estado_Persona) (*Lista_Datos_DataNode, error)
	mustEmbedUnimplementedNameNodeServer()
}

// UnimplementedNameNodeServer must be embedded to have forward compatible implementations.
type UnimplementedNameNodeServer struct {
}

func (UnimplementedNameNodeServer) Recepcion_Info(context.Context, *Datos) (*Recepcion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recepcion_Info not implemented")
}
func (UnimplementedNameNodeServer) ConsultarNombres(context.Context, *Estado_Persona) (*Lista_Datos_DataNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsultarNombres not implemented")
}
func (UnimplementedNameNodeServer) mustEmbedUnimplementedNameNodeServer() {}

// UnsafeNameNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NameNodeServer will
// result in compilation errors.
type UnsafeNameNodeServer interface {
	mustEmbedUnimplementedNameNodeServer()
}

func RegisterNameNodeServer(s grpc.ServiceRegistrar, srv NameNodeServer) {
	s.RegisterService(&NameNode_ServiceDesc, srv)
}

func _NameNode_Recepcion_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Datos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServer).Recepcion_Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.NameNode/Recepcion_Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServer).Recepcion_Info(ctx, req.(*Datos))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameNode_ConsultarNombres_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Estado_Persona)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameNodeServer).ConsultarNombres(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.NameNode/ConsultarNombres",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameNodeServer).ConsultarNombres(ctx, req.(*Estado_Persona))
	}
	return interceptor(ctx, in, info, handler)
}

// NameNode_ServiceDesc is the grpc.ServiceDesc for NameNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NameNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.NameNode",
	HandlerType: (*NameNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Recepcion_Info",
			Handler:    _NameNode_Recepcion_Info_Handler,
		},
		{
			MethodName: "ConsultarNombres",
			Handler:    _NameNode_ConsultarNombres_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mess.proto",
}

// DataNodeClient is the client API for DataNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataNodeClient interface {
	Solicitud_Info_DataNode(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Lista_Datos_DataNode, error)
	RegistrarNombre(ctx context.Context, in *Registro, opts ...grpc.CallOption) (*Recepcion, error)
}

type dataNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewDataNodeClient(cc grpc.ClientConnInterface) DataNodeClient {
	return &dataNodeClient{cc}
}

func (c *dataNodeClient) Solicitud_Info_DataNode(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Lista_Datos_DataNode, error) {
	out := new(Lista_Datos_DataNode)
	err := c.cc.Invoke(ctx, "/grpc.DataNode/Solicitud_Info_DataNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) RegistrarNombre(ctx context.Context, in *Registro, opts ...grpc.CallOption) (*Recepcion, error) {
	out := new(Recepcion)
	err := c.cc.Invoke(ctx, "/grpc.DataNode/RegistrarNombre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataNodeServer is the server API for DataNode service.
// All implementations must embed UnimplementedDataNodeServer
// for forward compatibility
type DataNodeServer interface {
	Solicitud_Info_DataNode(context.Context, *Id) (*Lista_Datos_DataNode, error)
	RegistrarNombre(context.Context, *Registro) (*Recepcion, error)
	mustEmbedUnimplementedDataNodeServer()
}

// UnimplementedDataNodeServer must be embedded to have forward compatible implementations.
type UnimplementedDataNodeServer struct {
}

func (UnimplementedDataNodeServer) Solicitud_Info_DataNode(context.Context, *Id) (*Lista_Datos_DataNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Solicitud_Info_DataNode not implemented")
}
func (UnimplementedDataNodeServer) RegistrarNombre(context.Context, *Registro) (*Recepcion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrarNombre not implemented")
}
func (UnimplementedDataNodeServer) mustEmbedUnimplementedDataNodeServer() {}

// UnsafeDataNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataNodeServer will
// result in compilation errors.
type UnsafeDataNodeServer interface {
	mustEmbedUnimplementedDataNodeServer()
}

func RegisterDataNodeServer(s grpc.ServiceRegistrar, srv DataNodeServer) {
	s.RegisterService(&DataNode_ServiceDesc, srv)
}

func _DataNode_Solicitud_Info_DataNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).Solicitud_Info_DataNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.DataNode/Solicitud_Info_DataNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).Solicitud_Info_DataNode(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_RegistrarNombre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Registro)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).RegistrarNombre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.DataNode/RegistrarNombre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).RegistrarNombre(ctx, req.(*Registro))
	}
	return interceptor(ctx, in, info, handler)
}

// DataNode_ServiceDesc is the grpc.ServiceDesc for DataNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.DataNode",
	HandlerType: (*DataNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Solicitud_Info_DataNode",
			Handler:    _DataNode_Solicitud_Info_DataNode_Handler,
		},
		{
			MethodName: "RegistrarNombre",
			Handler:    _DataNode_RegistrarNombre_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mess.proto",
}
